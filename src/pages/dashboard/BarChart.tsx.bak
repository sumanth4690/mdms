import React from "react";
import styled, { withTheme } from "styled-components/macro";
import Chart from "react-chartjs-2";
import { MoreVertical } from "react-feather";
import { rgba } from "polished";

import { fetchLast30DaysActiveMeters } from 'api/services/dashboard'
import { useQuery } from 'react-query'
import { fetchLatestDateTimeForDataSync } from 'api/services/time-labels'
import { add, eachDayOfInterval, sub } from 'date-fns'
import format from 'date-fns/format'
import AccessAlarmIcon from '@mui/icons-material/AccessAlarm';


import {
  Card as MuiCard,
  CardContent as MuiCardContent,
  CardHeader,
  IconButton,
  Grid,
  Typography,
} from "@mui/material";
import { spacing } from "@mui/system";

const Card = styled(MuiCard)(spacing);

const CardContent = styled(MuiCardContent)`
  &:last-child {
    padding-bottom: 14px;
  }
`;

const ChartWrapper = styled.div`
  height: 240px;
  width: 100%;
`;

const BarChart = ({ theme }) => {
  const firstDatasetColor = '#407ddd';
  const secondDatasetColor = '#dee2e6';

  const { data, isLoading, error } = useQuery(
    ['last30DaysActiveMeters'],
    fetchLast30DaysActiveMeters
  )

  const {
    data: latestTime,
    error: error4,
    isLoading: loading4,
  } = useQuery('datetime', fetchLatestDateTimeForDataSync)

  const date = latestTime?.data?.data[0].server_date_time
  const addedDate = add(new Date(date), {
    hours: 5,
    minutes: 30,
  })

  const xaxis = eachDayOfInterval({
    start: sub(new Date(), { days: 29 }),
    end: new Date(),
  }).map((item) => format(item, 'yyyy-MM-dd'))

  const meter1 = data?.data?.data
    .filter((item) => item.meter_connection_type_id == 1)
    .map((item) => ({
      ...item,
      date: format(add(new Date(item.date), { days: 1 }), 'yyyy-MM-dd'),
    }))

  const meter2 = data?.data?.data
    .filter((item) => item.meter_connection_type_id == 2)
    .map((item) => ({
      ...item,
      date: format(add(new Date(item.date), { days: 1 }), 'yyyy-MM-dd'),
    }))

  const meter1ChartData =
    meter1 &&
    xaxis
      .map((date) =>
        meter1.find((item2) => item2.date == date)
          ? meter1.find((item2) => item2.date == date)
          : {
            meter_connection_type_id: '1',
            date: date,
            countDistinct: {
              meter_serial_number: 0,
            },
          }
      )
      .map((item) => item.countDistinct.meter_serial_number)

	console.log(meter1ChartData);


  const meter2ChartData =
    meter2 &&
    xaxis
      .map((date) =>
        meter2.find((item2) => item2.date == date)
          ? meter2.find((item2) => item2.date == date)
          : {
            meter_connection_type_id: '1',
            date: date,
            countDistinct: {
              meter_serial_number: 0,
            },
          }
      )
      .map((item) => item.countDistinct.meter_serial_number)



  const datafinal = {
    labels: [
      "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"
    ],
    datasets: [
      {
        label: "1 Phase",
        backgroundColor: firstDatasetColor,
        borderColor: firstDatasetColor,
        hoverBackgroundColor: firstDatasetColor,
        hoverBorderColor: firstDatasetColor,
        data: meter1ChartData,
        barPercentage: 0.6,
        categoryPercentage: 0.5,
      },
      {
        label: "3 Phase",
        backgroundColor: secondDatasetColor,
        borderColor: secondDatasetColor,
        hoverBackgroundColor: secondDatasetColor,
        hoverBorderColor: secondDatasetColor,
        data: meter2ChartData,
        barPercentage: 0.6,
        categoryPercentage: 0.5,
        borderRadius: 6,
      },
    ],
  };

  const options = {
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false,
      },
    },
    scales: {
      y: {
        grid: {
          display: false,
        },
        stacked: true,
      },

      x: {
        stacked: true,
        grid: {
          color: "transparent",
        },
      },
    },
  };

  return (
    <Card mb={6}>
      {/* <CardHeader title="Active Meters in Last 30 days"/> */}
      <Grid md={12} justifyContent="space-between" container>
        <Grid md={6} p={2} >
          <Typography variant="h6">
            Active meters in last 30 days
          </Typography>
        </Grid>
        <Grid md={6} p={2}>
          <Typography variant="caption">
            <div className="prepaidtimeclass" ><AccessAlarmIcon className="alarmicon" />{''}{localStorage.getItem('syncdatetime')}</div>
          </Typography>
        </Grid>
      </Grid>
      <CardContent>
        <ChartWrapper>
          <Chart type="bar" data={datafinal} options={options} />
        </ChartWrapper>
      </CardContent>
    </Card>
  );
};

export default withTheme(BarChart);
